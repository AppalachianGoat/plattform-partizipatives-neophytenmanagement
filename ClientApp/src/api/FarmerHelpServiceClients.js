"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiException = exports.CreateUserDto = exports.NegotiationStatus = exports.Negotiation = exports.HelperHelpOffer = exports.LocationDto = exports.CreateFarmerHelpRequestDto = exports.FilterFarmerHelpRequestDto = exports.InvasiveSpeciesType = exports.Location = exports.User = exports.FarmerHelpRequest = exports.UserClient = exports.NegotiationsClient = exports.LocationClient = exports.InvasiveSpeciesTypesClient = exports.HelperHelpOffersClient = exports.FarmerHelpRequestsClient = void 0;
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
var FarmerHelpRequestsClient = /** @class */ (function () {
    function FarmerHelpRequestsClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    FarmerHelpRequestsClient.prototype.getFarmerHelpRequests = function (filterDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/FarmerHelpRequests/get";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(filterDto);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetFarmerHelpRequests(_response);
        });
    };
    FarmerHelpRequestsClient.prototype.processGetFarmerHelpRequests = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(FarmerHelpRequest.fromJS(item));
                    }
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    FarmerHelpRequestsClient.prototype.getFarmerHelpRequest = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/FarmerHelpRequests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetFarmerHelpRequest(_response);
        });
    };
    FarmerHelpRequestsClient.prototype.processGetFarmerHelpRequest = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = FarmerHelpRequest.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    FarmerHelpRequestsClient.prototype.updateFarmerHelpRequest = function (id, farmerHelpRequest) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/FarmerHelpRequests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(farmerHelpRequest);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateFarmerHelpRequest(_response);
        });
    };
    FarmerHelpRequestsClient.prototype.processUpdateFarmerHelpRequest = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_1 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_1) {
                fileName_1 = decodeURIComponent(fileName_1);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_1 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_1, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    FarmerHelpRequestsClient.prototype.deleteFarmerHelpRequest = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/FarmerHelpRequests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteFarmerHelpRequest(_response);
        });
    };
    FarmerHelpRequestsClient.prototype.processDeleteFarmerHelpRequest = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_2 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_2) {
                fileName_2 = decodeURIComponent(fileName_2);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_2 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_2, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    FarmerHelpRequestsClient.prototype.createFarmerHelpRequest = function (farmerHelpRequestDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/FarmerHelpRequests/create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(farmerHelpRequestDto);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateFarmerHelpRequest(_response);
        });
    };
    FarmerHelpRequestsClient.prototype.processCreateFarmerHelpRequest = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = FarmerHelpRequest.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return FarmerHelpRequestsClient;
}());
exports.FarmerHelpRequestsClient = FarmerHelpRequestsClient;
var HelperHelpOffersClient = /** @class */ (function () {
    function HelperHelpOffersClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    HelperHelpOffersClient.prototype.getHelperHelpOffers = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/HelperHelpOffers";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetHelperHelpOffers(_response);
        });
    };
    HelperHelpOffersClient.prototype.processGetHelperHelpOffers = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                        var item = resultData200_2[_i];
                        result200.push(HelperHelpOffer.fromJS(item));
                    }
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    HelperHelpOffersClient.prototype.createHelperHelpOffer = function (helperHelpOffer) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/HelperHelpOffers";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(helperHelpOffer);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateHelperHelpOffer(_response);
        });
    };
    HelperHelpOffersClient.prototype.processCreateHelperHelpOffer = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = HelperHelpOffer.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    HelperHelpOffersClient.prototype.getHelperHelpOffer = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/HelperHelpOffers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetHelperHelpOffer(_response);
        });
    };
    HelperHelpOffersClient.prototype.processGetHelperHelpOffer = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = HelperHelpOffer.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    HelperHelpOffersClient.prototype.updateHelperHelpOffer = function (id, helperHelpOffer) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/HelperHelpOffers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(helperHelpOffer);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateHelperHelpOffer(_response);
        });
    };
    HelperHelpOffersClient.prototype.processUpdateHelperHelpOffer = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_3 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_3) {
                fileName_3 = decodeURIComponent(fileName_3);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_3 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_3, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    HelperHelpOffersClient.prototype.deleteHelperHelpOffer = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/HelperHelpOffers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteHelperHelpOffer(_response);
        });
    };
    HelperHelpOffersClient.prototype.processDeleteHelperHelpOffer = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_4 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_4) {
                fileName_4 = decodeURIComponent(fileName_4);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_4 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_4, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return HelperHelpOffersClient;
}());
exports.HelperHelpOffersClient = HelperHelpOffersClient;
var InvasiveSpeciesTypesClient = /** @class */ (function () {
    function InvasiveSpeciesTypesClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    InvasiveSpeciesTypesClient.prototype.get = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/InvasiveSpeciesTypes";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    InvasiveSpeciesTypesClient.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                        var item = resultData200_3[_i];
                        result200.push(InvasiveSpeciesType.fromJS(item));
                    }
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    InvasiveSpeciesTypesClient.prototype.put = function (id, speciesType) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/InvasiveSpeciesTypes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(speciesType);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPut(_response);
        });
    };
    InvasiveSpeciesTypesClient.prototype.processPut = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_5 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_5) {
                fileName_5 = decodeURIComponent(fileName_5);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_5 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_5, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return InvasiveSpeciesTypesClient;
}());
exports.InvasiveSpeciesTypesClient = InvasiveSpeciesTypesClient;
var LocationClient = /** @class */ (function () {
    function LocationClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    LocationClient.prototype.getLocations = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Location";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetLocations(_response);
        });
    };
    LocationClient.prototype.processGetLocations = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                        var item = resultData200_4[_i];
                        result200.push(Location.fromJS(item));
                    }
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    LocationClient.prototype.postLocation = function (location) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Location";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(location);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPostLocation(_response);
        });
    };
    LocationClient.prototype.processPostLocation = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = Location.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    LocationClient.prototype.getLocation = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Location/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetLocation(_response);
        });
    };
    LocationClient.prototype.processGetLocation = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = Location.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    LocationClient.prototype.putLocation = function (id, location) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Location/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(location);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPutLocation(_response);
        });
    };
    LocationClient.prototype.processPutLocation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_6 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_6) {
                fileName_6 = decodeURIComponent(fileName_6);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_6 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_6, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    LocationClient.prototype.deleteLocation = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Location/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteLocation(_response);
        });
    };
    LocationClient.prototype.processDeleteLocation = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = Location.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return LocationClient;
}());
exports.LocationClient = LocationClient;
var NegotiationsClient = /** @class */ (function () {
    function NegotiationsClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    NegotiationsClient.prototype.getNegotiations = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Negotiations";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetNegotiations(_response);
        });
    };
    NegotiationsClient.prototype.processGetNegotiations = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                        var item = resultData200_5[_i];
                        result200.push(Negotiation.fromJS(item));
                    }
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    NegotiationsClient.prototype.createNegotiation = function (negotiation) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Negotiations";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(negotiation);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateNegotiation(_response);
        });
    };
    NegotiationsClient.prototype.processCreateNegotiation = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = Negotiation.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    NegotiationsClient.prototype.getNegotiation = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Negotiations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetNegotiation(_response);
        });
    };
    NegotiationsClient.prototype.processGetNegotiation = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = Negotiation.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    NegotiationsClient.prototype.updateNegotiation = function (id, negotiation) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Negotiations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(negotiation);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateNegotiation(_response);
        });
    };
    NegotiationsClient.prototype.processUpdateNegotiation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_7 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_7) {
                fileName_7 = decodeURIComponent(fileName_7);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_7 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_7, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    NegotiationsClient.prototype.deleteNegotiation = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/Negotiations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteNegotiation(_response);
        });
    };
    NegotiationsClient.prototype.processDeleteNegotiation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_8 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_8) {
                fileName_8 = decodeURIComponent(fileName_8);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_8 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_8, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return NegotiationsClient;
}());
exports.NegotiationsClient = NegotiationsClient;
var UserClient = /** @class */ (function () {
    function UserClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    UserClient.prototype.getUser = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetUser(_response);
        });
    };
    UserClient.prototype.processGetUser = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = User.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    UserClient.prototype.updateUser = function (id, userDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(userDto);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateUser(_response);
        });
    };
    UserClient.prototype.processUpdateUser = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_9 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_9) {
                fileName_9 = decodeURIComponent(fileName_9);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_9 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_9, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    UserClient.prototype.deleteUser = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteUser(_response);
        });
    };
    UserClient.prototype.processDeleteUser = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            var fileName_10 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName_10) {
                fileName_10 = decodeURIComponent(fileName_10);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName_10 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(function (blob) { return { fileName: fileName_10, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    UserClient.prototype.createUser = function (userDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/v1/User";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(userDto);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateUser(_response);
        });
    };
    UserClient.prototype.processCreateUser = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = User.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return UserClient;
}());
exports.UserClient = UserClient;
var FarmerHelpRequest = /** @class */ (function () {
    function FarmerHelpRequest(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FarmerHelpRequest.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.ownerUser = _data["ownerUser"] ? User.fromJS(_data["ownerUser"]) : undefined;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : undefined;
            this.workVolume = _data["workVolume"];
            this.numberOfHelpers = _data["numberOfHelpers"];
            if (Array.isArray(_data["invasiveSpeciesTypes"])) {
                this.invasiveSpeciesTypes = [];
                for (var _i = 0, _a = _data["invasiveSpeciesTypes"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.invasiveSpeciesTypes.push(InvasiveSpeciesType.fromJS(item));
                }
            }
        }
    };
    FarmerHelpRequest.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FarmerHelpRequest();
        result.init(data);
        return result;
    };
    FarmerHelpRequest.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerUser"] = this.ownerUser ? this.ownerUser.toJSON() : undefined;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["location"] = this.location ? this.location.toJSON() : undefined;
        data["workVolume"] = this.workVolume;
        data["numberOfHelpers"] = this.numberOfHelpers;
        if (Array.isArray(this.invasiveSpeciesTypes)) {
            data["invasiveSpeciesTypes"] = [];
            for (var _i = 0, _a = this.invasiveSpeciesTypes; _i < _a.length; _i++) {
                var item = _a[_i];
                data["invasiveSpeciesTypes"].push(item.toJSON());
            }
        }
        return data;
    };
    return FarmerHelpRequest;
}());
exports.FarmerHelpRequest = FarmerHelpRequest;
var User = /** @class */ (function () {
    function User(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    User.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.role = _data["role"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    };
    User.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new User();
        result.init(data);
        return result;
    };
    User.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["role"] = this.role;
        data["email"] = this.email;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    };
    return User;
}());
exports.User = User;
var Location = /** @class */ (function () {
    function Location(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Location.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.locationString = _data["locationString"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    };
    Location.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Location();
        result.init(data);
        return result;
    };
    Location.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["locationString"] = this.locationString;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    };
    return Location;
}());
exports.Location = Location;
var InvasiveSpeciesType = /** @class */ (function () {
    function InvasiveSpeciesType(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    InvasiveSpeciesType.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.imageUrl = _data["imageUrl"];
        }
    };
    InvasiveSpeciesType.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new InvasiveSpeciesType();
        result.init(data);
        return result;
    };
    InvasiveSpeciesType.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["imageUrl"] = this.imageUrl;
        return data;
    };
    return InvasiveSpeciesType;
}());
exports.InvasiveSpeciesType = InvasiveSpeciesType;
var FilterFarmerHelpRequestDto = /** @class */ (function () {
    function FilterFarmerHelpRequestDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FilterFarmerHelpRequestDto.prototype.init = function (_data) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
            this.location = _data["location"];
            this.distanceFromLocation = _data["distanceFromLocation"];
            this.workVolume = _data["workVolume"];
            this.numberOfHelpers = _data["numberOfHelpers"];
        }
    };
    FilterFarmerHelpRequestDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FilterFarmerHelpRequestDto();
        result.init(data);
        return result;
    };
    FilterFarmerHelpRequestDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["location"] = this.location;
        data["distanceFromLocation"] = this.distanceFromLocation;
        data["workVolume"] = this.workVolume;
        data["numberOfHelpers"] = this.numberOfHelpers;
        return data;
    };
    return FilterFarmerHelpRequestDto;
}());
exports.FilterFarmerHelpRequestDto = FilterFarmerHelpRequestDto;
var CreateFarmerHelpRequestDto = /** @class */ (function () {
    function CreateFarmerHelpRequestDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateFarmerHelpRequestDto.prototype.init = function (_data) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
            this.ownerUserId = _data["ownerUserId"];
            this.location = _data["location"] ? LocationDto.fromJS(_data["location"]) : undefined;
            this.workVolume = _data["workVolume"];
            this.numberOfHelpers = _data["numberOfHelpers"];
            if (Array.isArray(_data["invasiveSpeciesTypeIds"])) {
                this.invasiveSpeciesTypeIds = [];
                for (var _i = 0, _a = _data["invasiveSpeciesTypeIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.invasiveSpeciesTypeIds.push(item);
                }
            }
        }
    };
    CreateFarmerHelpRequestDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateFarmerHelpRequestDto();
        result.init(data);
        return result;
    };
    CreateFarmerHelpRequestDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["ownerUserId"] = this.ownerUserId;
        data["location"] = this.location ? this.location.toJSON() : undefined;
        data["workVolume"] = this.workVolume;
        data["numberOfHelpers"] = this.numberOfHelpers;
        if (Array.isArray(this.invasiveSpeciesTypeIds)) {
            data["invasiveSpeciesTypeIds"] = [];
            for (var _i = 0, _a = this.invasiveSpeciesTypeIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["invasiveSpeciesTypeIds"].push(item);
            }
        }
        return data;
    };
    return CreateFarmerHelpRequestDto;
}());
exports.CreateFarmerHelpRequestDto = CreateFarmerHelpRequestDto;
var LocationDto = /** @class */ (function () {
    function LocationDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LocationDto.prototype.init = function (_data) {
        if (_data) {
            this.locationString = _data["locationString"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    };
    LocationDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LocationDto();
        result.init(data);
        return result;
    };
    LocationDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["locationString"] = this.locationString;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    };
    return LocationDto;
}());
exports.LocationDto = LocationDto;
var HelperHelpOffer = /** @class */ (function () {
    function HelperHelpOffer(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HelperHelpOffer.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.ownerUser = _data["ownerUser"] ? User.fromJS(_data["ownerUser"]) : undefined;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : undefined;
            this.distanceFromLocation = _data["distanceFromLocation"];
            this.workVolume = _data["workVolume"];
            this.numberOfHelpers = _data["numberOfHelpers"];
        }
    };
    HelperHelpOffer.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HelperHelpOffer();
        result.init(data);
        return result;
    };
    HelperHelpOffer.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerUser"] = this.ownerUser ? this.ownerUser.toJSON() : undefined;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["location"] = this.location ? this.location.toJSON() : undefined;
        data["distanceFromLocation"] = this.distanceFromLocation;
        data["workVolume"] = this.workVolume;
        data["numberOfHelpers"] = this.numberOfHelpers;
        return data;
    };
    return HelperHelpOffer;
}());
exports.HelperHelpOffer = HelperHelpOffer;
var Negotiation = /** @class */ (function () {
    function Negotiation(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Negotiation.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : undefined;
            this.initiatedByUser = _data["initiatedByUser"] ? User.fromJS(_data["initiatedByUser"]) : undefined;
            this.farmerHelpRequest = _data["farmerHelpRequest"] ? FarmerHelpRequest.fromJS(_data["farmerHelpRequest"]) : undefined;
            this.helperHelpOffer = _data["helperHelpOffer"] ? HelperHelpOffer.fromJS(_data["helperHelpOffer"]) : undefined;
            this.farmerStatus = _data["farmerStatus"];
            this.helperStatus = _data["helperStatus"];
        }
    };
    Negotiation.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Negotiation();
        result.init(data);
        return result;
    };
    Negotiation.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : undefined;
        data["initiatedByUser"] = this.initiatedByUser ? this.initiatedByUser.toJSON() : undefined;
        data["farmerHelpRequest"] = this.farmerHelpRequest ? this.farmerHelpRequest.toJSON() : undefined;
        data["helperHelpOffer"] = this.helperHelpOffer ? this.helperHelpOffer.toJSON() : undefined;
        data["farmerStatus"] = this.farmerStatus;
        data["helperStatus"] = this.helperStatus;
        return data;
    };
    return Negotiation;
}());
exports.Negotiation = Negotiation;
var NegotiationStatus;
(function (NegotiationStatus) {
    NegotiationStatus[NegotiationStatus["Pending"] = 0] = "Pending";
    NegotiationStatus[NegotiationStatus["Accepted"] = 1] = "Accepted";
    NegotiationStatus[NegotiationStatus["Rejected"] = 2] = "Rejected";
})(NegotiationStatus || (exports.NegotiationStatus = NegotiationStatus = {}));
var CreateUserDto = /** @class */ (function () {
    function CreateUserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateUserDto.prototype.init = function (_data) {
        if (_data) {
            this.role = _data["role"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    };
    CreateUserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateUserDto();
        result.init(data);
        return result;
    };
    CreateUserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["email"] = this.email;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    };
    return CreateUserDto;
}());
exports.CreateUserDto = CreateUserDto;
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
